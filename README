TEAM:

Anton Shtarkman
ashtark3
-- Edited each piece .h file to create level_move_shape and level_capture_shape functions for the .cpp files
-- Created each cpp files for pieces

   - Pawn.cpp:
     - This file took the longest beacuse legal_capture_shape was necessary
     - First checked whether the white and black pawns are situated in their respective birth positions
     - Then checked if the pawn made a valid move depending on where it is on the board

   - Rook.cpp:
     - First checked whether the rook moves only straight up and down the rows/columns (no diagonal movement)
     
   - King.cpp:
     - Checked that a king could move anywhere except for only one square

   - Bishop.cpp:
     - Checked that a bishop could traverse an unlimited number of blocks but only diagonally

   - Knight.cpp:
     - Checked that a knight moved in an L-shape

   - Queen.cpp:
     - Checked that a queen moved anywhere (vertically / horizontally / diagonally) for unlimited grids

-- Worked on the display of the board in Board.cpp
   - made several helper functions to split up the necessary parts of the display

-- debugged

-- made README file
   

Richard Kim
rkim62

-- worked on Game.cpp on the in-check, stalemate, checkmate and istream related functions

-- made helper functions in Board.cpp (valid_char and istream operator)

-- made UML diagram


Yiyang Li
yli302


-- worked on all of Board.cpp except display

-- made copy constructor and make move related fucntions in Game.cpp

-- catch throw in main.cpp

-- debugging


DESIGN:

--The main design aspect of our project is that we split up a lot of it into helper functions to clean up the code. For example, the display function consists of 4 lines of helper functions that each print out a portion of the board (print_header, print_board, print_ascii_art, and print_quote). If the display was not split up, it would be up being a very long function which would worsen readability.

--We did nested loop to access pieces without having to use a getter function for map.

--The path clear is designed in a way so that it applies universally to all pieces including those who don't really need path checking, which saves some effort

--In general, we followed the given design without changing much. We made istream and make_move functions in board as well to help the code writing of game.


COMPLETENESS:

We believe that everything works after hours of debugging.


